priority -40

snippet sfform "Symfony2 / Form / Form type" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class `!v sniphpets#basename()` extends AbstractType
{
	public function buildForm(FormBuilderInterface \$builder, array \$options)
	{
		\$builder
			->add(${0}
		;
	}

	public function setDefaultOptions(OptionsResolverInterface \$resolver)
	{
		\$resolver->setDefaults(array(
			'data_class' => ${1:'`!v sniphpets#symfony#resolve_bundle_namespace()`\Entity\\`!v sniphpets#basename('Type')`'},
		));
	}

	public function getName()
	{
		return '${2:`!v sniphpets#camel_to_snake(sniphpets#symfony#resolve_bundle_name() . sniphpets#basename('Type'))`}';
	}
}
endsnippet

snippet sfformextension "Symfony / Form / Form type extension" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\AbstractTypeExtension;

class `!v sniphpets#basename()` extends AbstractTypeExtension
{
	public function getExtendedType()
	{
		return '${1:form}';
	}
}
endsnippet

snippet sfformbuildform "Symfony / Form / buildForm method" b
public function buildForm(FormBuilderInterface \$builder, array \$options)
{
	\$builder
		->add(${0})
	;
}
endsnippet

snippet sfformconfigureoptions "Symfony / Form / Configure options" b
public function setDefaultOptions(OptionsResolverInterface \$resolver)
{
	\$resolver->${1:setDefaults}(array(
		${0}
	));
}
endsnippet

snippet sfformbuildview "Symfony / Form / buildView method" b
 public function buildView(FormView \$view, FormInterface \$form, array \$options)
 {
 	${0}
 }
endsnippet

snippet sfformfinishview "Symfony / Form / finishView method" b
 public function finishView(FormView \$view, FormInterface \$form, array \$options)
 {
 	${0}
 }
endsnippet

snippet sfformadd "Symfony / Form / Add field" b
->add('${1:name}', ${2:type}, array(
	${0}
))
endsnippet

snippet sfdatatransformer "Symfony / Form / Data transformer" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Symfony\Component\Form\DataTransformerInterface;
use Symfony\Component\Form\Exception\UnexpectedTypeException;
use Symfony\Component\Form\Exception\TransformationFailedException;

class `!v sniphpets#basename()` implements DataTransformerInterface
{
	public function transform(\$value)
	{
		${0}
	}

	public function reverseTransform(\$value)
	{
	}
}
endsnippet

snippet sfhandleform "Symfony / Form / Handle" b
$${1:form}->handleRequest($${2:request});

if (\$$1->isSubmitted() && \$$1->isValid()) {
	${0}
}
endsnippet
