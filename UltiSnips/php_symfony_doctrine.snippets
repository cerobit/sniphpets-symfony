priority -40

snippet sfrepository "Symfony2 / Doctrine / Repository" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Doctrine\ORM\EntityRepository;

class `!v sniphpets#basename()` extends EntityRepository
{
	${0}
}
endsnippet

snippet sfrepositoryfind "Symfony2 / Doctrine / Repository method" b
public function find${1}(${2})
{
	return $this
		->createQueryBuilder('${3:`!v tolower(strpart(sniphpets#basename(), 0, 1))`}')
		->select('$3')
		->${0}
		->getQuery()
		->getResult()
	;
}
endsnippet

snippet sfentity "Symfony2 / Doctrine / Entity" b
<?php

namespace `!v sniphpets#resolve_namespace()`;

use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * @ORM\Entity(${1:repositoryClass="${2:`!v sniphpets#symfony#resolve_bundle_namespace()`\Repository\\`!v sniphpets#basename()`Repository}"})
 * @ORM\Table(name="${3:`!v sniphpets#camel_to_snake(sniphpets#basename())`}")
 */
class `!v sniphpets#basename()`
{
	/**
	 * @ORM\Id()
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	protected \$id;${0}
}
endsnippet

snippet sfcolumn "Symfony2 / Doctrine / Column" b
/**
 * @ORM\Column(type="${2:string}"${3})
 */
protected \$${1:name};${0}
endsnippet

snippet sfotou "Symfony2 / Doctrine / OneToOne unidirectional column" b
/**
 * @ORM\OneToOne(targetEntity="${1:Entity}")
 */
protected \$${2:${1/^./\l$0/}};${0}
endsnippet

snippet sfoto "Symfony2 / Doctrine / OneToOne owner column" b
/**
 * @ORM\OneToOne(targetEntity="${1:Entity}", inversedBy="${2:`!v sniphpets#lcfirst(sniphpets#basename())`}")
 */
protected \$${3:${1/^./\l$0/}};${0}
endsnippet

snippet sfotoi "Symfony2 / Doctrine / OneToOne inverse column" b
/**
 * @ORM\OneToOne(targetEntity="${1:Entity}", mappedBy="${2:`!v sniphpets#lcfirst(sniphpets#basename())`}")
 */
protected \$${3:${1/^./\l$0/}};${0}
endsnippet

snippet sfotm "Symfony2 / Doctrine / OneToMany column" b
/**
 * @ORM\OneToMany(targetEntity="${1:Entity}", mappedBy="${2:`!v sniphpets#lcfirst(sniphpets#basename())`}${3}")
 */
protected \$${4:${1/^./\l$0/}};${0}
endsnippet

snippet sfmto "Symfony2 / Doctrine / ManyToOne column" b
/**
 * @ORM\ManyToOne(targetEntity="${1:Entity}", inversedBy="${2:`!v sniphpets#lcfirst(sniphpets#basename())`}")
 */
protected \$${3:${1/^./\l$0/}${4}};${0}
endsnippet

snippet sfmtou "Symfony2 / Doctrine / ManyToOne unidirectional column" b
/**
 * @ORM\ManyToOne(targetEntity="${2:Entity}")
 */
protected \$${1:name};${0}
endsnippet

snippet sfmtmu "Symfony2 / Doctrine / ManyToMany unidirectional column" b
/**
 * @ORM\ManyToMany(targetEntity="${2:Entity}")
 * @ORM\JoinTable(name="${3:}")
 */
protected \$${1:name};${0}
endsnippet

snippet sfmtm "Symfony2 / Doctrine / ManyToMany owner column" b
/**
 * @ORM\ManyToMany(targetEntity="${2:Entity}", inversedBy="${3:property}")
 * @ORM\JoinTable(name="${4:}")
 */
protected \$${1:name};${0}
endsnippet

snippet sfmtmi "Symfony2 / Doctrine / ManyToMany inverse column" b
/**
 * @ORM\ManyToMany(targetEntity="${2:Entity}", mappedBy="${3:property}")
 */
protected \$${1:name};${0}
endsnippet

snippet sfentityhas "Symfony 2 / Doctrine / Entity / Has method" b
/**
 * Has${1/[A-Z]/ \l$0/g}.
 *
 * @param ${2/^$/mixed /}$${1/^./\l$0/}
 * @return bool
 */
public function has${1}(${2:$1 }$${1/^./\l$0/})
{
	return $this->${3:${1/^./\l$0/}s}->contains($${1/^./\l$0/});
}
endsnippet

snippet sfentityadd "Symfony 2 / Doctrine / Entity / 'Adder' method" b
/**
 * Add${1/[A-Z]/ \l$0/g}.
 *
 * @param ${2/^$/mixed /}$${1/^./\l$0/}
 * @return `!v sniphpets#basename()`
 */
public function add${1}(${2:$1 }$${1/^./\l$0/})
{
	if (!$this->${3:${1/^./\l$0/}s}->contains($${1/^./\l$0/})) {
		$${1/^./\l$0/}->${4:set}${5:`!v sniphpets#basename()`}($this);
		$this->$3->add($${1/^./\l$0/});
	}

	return $this;
}
endsnippet

snippet sfentityremove "Symfony 2 / Doctrine / Entity / 'Remover' method" b
/**
 * Remove${1/[A-Z]/ \l$0/g}.
 *
 * @param ${2/^$/mixed /}$${1/^./\l$0/}
 * @return `!v sniphpets#basename()`
 */
public function remove${1}(${2:$1 }$${1/^./\l$0/})
{
	if (!$this->${3:${1/^./\l$0/}s}->contains($${1/^./\l$0/})) {
		$${1/^./\l$0/}->${4:remove}${5:`!v sniphpets#basename()`}(${6:$this});
		$this->$3->removeElement($${1/^./\l$0/});
	}

	return $this;
}
endsnippet

snippet sfsaveentity "Symfony 2 / Doctrine / Entity / Persist and flush" b
$${1:em}->persist($${2:model});
$$1->flush();
endsnippet
